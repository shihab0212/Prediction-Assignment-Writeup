---
title: "Model Prediction"
author: "Shihab Ahmad Shahriar"
date: "7/1/2020"
output: html_document
---
## 1. Essential Packages
```{r}
library(caret)
library(randomForest)
library(rpart)
library(readr)
```
Set seed for reproducability
```{r}
set.seed(20000)
```
## 2. Data Processing and cleaning
```{r}
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"   
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))  
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
```

Remove variables with near zero variance
```{r}
training<-training[,colSums(is.na(training)) == 0]
testing <-testing[,colSums(is.na(testing)) == 0]
```

Remove columns that are not predictors, which are the the seven first columns
```{r}
training   <-training[,-c(1:7)]
testing <-testing[,-c(1:7)]
```

# The data after cleaning
```{r}
dim(training)
```
## 3. Cross-validation
In order to get out-of-sample errors, split the training data in training (75%) and testing (25%) data) subsets:
```{r}
inTrain <- createDataPartition(y=training$classe, p=0.75, list=FALSE)    
NEOTraining <- training[inTrain, ]
NEOTesting <- training[-inTrain, ]  
dim(NEOTraining)
dim(NEOTesting)
```
## 4. Prediction Models

### DECISION TREE
Fit model on NEOTraining data
```{r}
fitDT <- rpart(classe ~ ., data=NEOTraining, method="class")
```
Use model to predict class in validation set (NEOTesting)
```{r}
predictionDT <- predict(fitDT, NEOTesting, type = "class")
```
Estimate the errors of the prediction algorithm in the Decision Tree model
```{r}
confusionMatrix(NEOTesting$classe, predictionDT)
```
### RANDOM FOREST
Fit model on NEOTraining data
```{r}
fitRF <- randomForest(classe ~ ., data=NEOTraining, method="class")
```
Use model to predict class in validation set (NEOTesting)
```{r}
predictionRF <- predict(fitRF, NEOTesting, type = "class")
```
Estimate the errors of the prediction algorithm in the Random Forest
```{r}
confusionMatrix(NEOTesting$classe, predictionRF)
```

### TEST THE MODEL TO PREDICT 20 DIFFERENT TEST CASES
Perform prediction
```{r}
predictSubmission <- predict(fitRF, testing, type="class")
predictSubmission
```
